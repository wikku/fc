% vim: et sw=2 ts=2

%%%% SYNTAX

v ∷= x | λx. e
e ∷= ret v | v v | let x = e in e | S κ. e | ⟨e⟩

%%%% REDUCTIONS

%%%%
-v>:

      e -e> e'
  ————————————————
  λx. e -v> λx. e'


%%%%
-e>:

  —————————————————————
  (λx. e) v -e> e{x:=v}

  ——————————————————————————
  let x = v in e -e> e{x:=v}

  —————————
  ⟨v⟩ -e> v

  ——————————————————————
  ⟨S κ. e⟩ -e> e{κ:=⟨□⟩}

  ————————————————————————————————————————————————————————
  let x = S κ. e₁ in e₂ -e> S κ. e₁{κ:=κ[let x = □ in e₂]}

  v -v> v'
  ————————————————
  ret v -e> ret v'

  v₁ -v> v₁'  v₂ -v> v₂'
  ——————————————————————
  v₁ v₂ -e> v₁' v₂'

  e₁ -e> e₁'  e₂ -e> e₂'
  ———————————————————————————————————————
  let x = e₁ in e₂ -e> let x = e₁' in e₂'

  e -e> e'
  ——————————————————
  S κ. e -e> S κ. e'

  e -e> e'
  ——————————————————
  κ[e] -e> κ[e']

  e -d> e'
  ————————————
  ⟨e⟩ -e> ⟨e'⟩

%%%%
-d>:

  ————————————————————
  S κ. e -d> S _. e{κ:=⟨□⟩}

  e₁ -e> e₁'  e₂ -d> e₂'
  ———————————————————————————————————————
  let x = e₁ in e₂ -d> let x = e₁' in e₂'

  e -e> e'
  ————————
  e -d> e'


%%%% SUPERDEVELOPMENTS

x* = x
(λx. e)* = λx. e*

(let x = S κ. e₁ in e₂)* = S κ. e₁*{κ:=κ[let x = □ in e₂*]}
(let x = v in e)* = e*{x:=v*}
(let x = e₁ in e₂)* = let x = e₁* in e₂*
((λx. e) v)* = e*{x:=v*}
(v₁ v₂)* = v₁* v₂*
⟨v⟩* = v*
⟨S κ. e⟩* = (e{κ:=⟨□⟩})*
(κ[e])* = κ[e*]
⟨e⟩* = ⟨e^⟩

(let x = S κ. e₁ in e₂)^ = S _. e₁*{κ:=⟨let x = □ in e₂^⟩}
(let x = v in e)^ = e^{x:=v*}
(let x = e₁ in e₂)^ = let x = e₁* in e₂^
(S κ. e)^ = S _. (e{κ:=⟨□⟩})*
e^ = e*


%%%% CHECKING Z

      e -e> e'
  ————————————————
  λx. e -v> λx. e'

  by induction, e' -e> e* and e* -e> e'*
  so λx. e' -v> (λx. e)* and (λx. e)* -v> (λx. e')*

%%%%
-e>:

  —————————————————————
  (λx. e) v -e> e{x:=v}

  subst lemma

  ——————————————————————————
  let x = v in e -e> e{x:=v}

  subst lemma

  —————————
  ⟨v⟩ -e> v

  triv

  ——————————————————————
  ⟨S κ. e⟩ -e> e{κ:=⟨□⟩}

  ok

  ————————————————————————————————————————————————————————
  let x = S κ. e₁ in e₂ -e> S κ. e₁{κ:=κ[let x = □ in e₂]}

  v -v> v'
  ————————————————
  ret v -e> ret v'

  triv

  v₁ -v> v₁'  v₂ -v> v₂'
  ——————————————————————
  v₁ v₂ -e> v₁' v₂'

  triv

  e₁ -e> e₁'  e₂ -e> e₂'
  ———————————————————————————————————————
  let x = e₁ in e₂ -e> let x = e₁' in e₂'

  triv

  e -e> e'
  ——————————————————
  S κ. e -e> S κ. e'

  triv

  e -e> e'
  ——————————————————
  κ[e] -e> κ[e']

  triv

  e -d> e'
  ————————————
  ⟨e⟩ -e> ⟨e'⟩

  triv

%%%%
-d>:

  ————————————————————
  S κ. e -d> S _. e{κ:=⟨□⟩}

  (S κ. e)^ = S _. (e{κ:=⟨□⟩})* = (S _. e{κ:=⟨□⟩})^
  ok

  e₁ -e> e₁'  e₂ -d> e₂'
  ———————————————————————————————————————
  let x = e₁ in e₂ -d> let x = e₁' in e₂'

  (let x = e₁ in e₂)^ = let x = e₁* in e₂^
  (let x = e₁' in e₂')^ = let x = e₁'* in e₂'^
  ok

  e -e> e'
  ————————
  e -d> e'

  z ind. mamy
  e' -e>> e* -e>> e'*

  chcemy e' -d>> e^ -d>> e'^, co nie wynika. trzeba sprawdzić przypadki, np.

  let x = S κ. e₁ in e₂ -d> S κ. e₁{κ:=κ[let x = □ in e₂]}
  (let x = S κ. e₁ in e₂)^ = S _. e₁*{κ:=⟨let x = □ in e₂^⟩}
  (S κ. e₁{κ:=κ[let x = □ in e₂]})^ = S _. (e₁{κ:=⟨let x = □ in e₂⟩})*
  ok

  S κ. e -d> S _. e{κ:=⟨□⟩}
  (S κ. e)^ = S _. (e{κ:=⟨□⟩})*
  (S _. e{κ:=⟨□⟩})^ = S _. (e{κ:=⟨□⟩})*
  ok

  ⟨S κ. e⟩ -d> e{κ:=⟨□⟩}
  ⟨S κ. e⟩^ = (e{κ:=⟨□⟩})*
  (e{κ:=⟨□⟩})^
  ok

