% vim: et

Kind val, expr  type.

Type lam        (val -> expr) -> val.
Type ret        val -> expr.
Type app        val -> val -> expr.
Type let        expr -> (val -> expr) -> expr.
Type shift0     ((expr -> expr) -> expr) -> expr.
Type delim      val -> expr -> expr.
Type ask        (expr -> expr) -> expr.

Define step : expr -> expr -> prop,
       stepc : expr -> ((expr -> expr) -> expr) -> prop by
  step (let (ret V) T) (T V);
  step (app (lam E) V) (E V);
  step (delim U (ret V)) (ret V);
  step (ask o\ (delim V (K o))) (ret V);
  step (delim U E) (E' (delim U)) := stepc E E';
  nabla k, step (k (E k)) (E' k k) := nabla k, stepc (E k) (E' k);

  step (delim U E) (delim U E') := step E E';
  step (let E T) (let E' T) := step E E';
  nabla k, step (k (E k)) (k (E' k)) := nabla k, step (E k) (E' k);

  stepc (shift0 E) E;
  stepc (let E T) (k\ E' (o\ k (let o T))) := stepc E E'.

Define many : (A -> A -> prop) -> A -> A -> prop by
  many R A A;
  many R A A' := exists A'', R A A'' /\ many R A'' A'.

Define maybe : (A -> A -> prop) -> A -> A -> prop by
  maybe R A A;
  maybe R A A' := R A A'.

Theorem steps_app : forall E E' E'', many step E E' -> many step E' E'' -> many step E E''.
  induction on 1.
  intros. case H1.
    search.
    apply IH to H4 H2. search.

Theorem step_subvs :
  (forall E E' U, nabla (x : val), step (E x) (E' x) -> step (E U) (E' U)) /\
  (forall E E' U, nabla (x : val), stepc (E x) (E' x) -> stepc (E U) (E' U)).
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    search.
    search.
    apply IH1 to H2 with U = U. search.
    apply IH1 to H2 with U = (U n2). search.
    apply IH to H2 with U = U. search.
    apply IH to H2 with U = U. search.
    apply IH to H2 with U = (U n2). search.
  intros. case H1.
    search.
    apply IH1 to H2 with U = U. search.

Split step_subvs as step_subv, stepc_subv.

Theorem steps_subv : forall E E' U, nabla (x : val), many step (E x) (E' x) -> many step (E U) (E' U).
  induction on 1. intros. case H1. search. apply step_subv to H2 with U = U. apply IH to H3 with U = U. search.

Theorem step_subdelims :
  (forall E E' U, nabla k, step (E k) (E' k) -> step (E (delim U)) (E' (delim U))) /\
  (forall E E' U, nabla k, stepc (E k) (E' k) -> stepc (E (delim U)) (E' (delim U))).
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    search.
    search.
    apply IH1 to H2 with U = U. search.
    apply IH1 to H2 with U = (U n2). search.
    apply IH1 to H2 with U = U. search.
    apply IH to H2 with U = U. search.
    apply IH to H2 with U = U. search.
    apply IH to H2 with U = (U n2). search.
    apply IH to H2 with U = U. search.
  intros. case H1.
    search.
    apply IH1 to H2 with U = U. search.

Split step_subdelims as step_subdelim, stepc_subdelim.

Theorem steps_subdelim : forall E E' U, nabla k, many step (E k) (E' k) -> many step (E (delim U)) (E' (delim U)).
  induction on 1. intros. case H1. search. apply step_subdelim to H2 with U = U. apply IH to H3 with U = U. search.

Theorem step_sublets :
  (forall E E' T, nabla (k : expr -> expr), step (E k) (E' k) -> step (E (o\ k (let o T))) (E' (o\ k (let o T)))) /\
  (forall E E' T, nabla (k : expr -> expr), stepc (E k) (E' k) -> stepc (E (o\ k (let o T))) (E' (o\ k (let o T)))).
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    search.
    search.
    apply IH1 to H2 with T = T. search.
    apply IH1 to H2 with T = (T n2). search.
    apply IH1 to H2 with T = T. search.
    apply IH to H2 with T = T. search.
    apply IH to H2 with T = T. search.
    apply IH to H2 with T = (T n2). search.
    apply IH to H2 with T = T. search.
  intros. case H1.
    search.
    apply IH1 to H2 with T = T. search.

Split step_sublets as step_sublet, stepc_sublet.

Theorem steps_sublet : forall E E' T, nabla (k : expr -> expr), many step (E k) (E' k) -> many step (E (o\ k (let o T))) (E' (o\ k (let o T))).
  induction on 1. intros. case H1. search. apply step_sublet to H2 with T = T. apply IH to H3 with T = T. search.

Theorem step_subks :
  (forall E E', nabla (k l : expr -> expr), step (E k l) (E' k l) -> step (E k k) (E' k k)) /\
  (forall E E', nabla (k l : expr -> expr), stepc (E k l) (E' k l) -> stepc (E k k) (E' k k)).
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    search.
    search.
    apply IH1 to H2. search.
    apply IH1 to H2. search.
    apply IH1 to H2. search.
    apply IH1 to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
  intros. case H1.
    search.
    apply IH1 to H2. search.

Split step_subks as step_subk, stepc_subk.

Theorem steps_subk : forall E E', nabla (k l : expr -> expr), many step (E k l) (E' k l) -> many step (E k k) (E' k k).
  induction on 1. intros. case H1. search. apply step_subk to H2. apply IH to H3. search.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Kind mode type.
Type g mode.
Type d val -> mode.

Define md : mode -> prop by
  md g; md (d V).

Define int : mode -> expr -> expr -> prop,
       intv : val -> val -> prop,
       stan : mode -> expr -> expr -> prop by
  nabla x, intv x x;
  intv (lam E) (lam E') := nabla x, stan g (E x) (E' x);

  int M (ret V) (ret V') := intv V V';
  int M (app V U) (app V' U') := intv V V' /\ intv U U';
  int M (let E T) (let E' T') := int g E E' /\ nabla x, stan M (T x) (T' x);
  int M (shift0 E) (shift0 E') := nabla k, stan g (E k) (E' k);
  int M (delim U E) (delim U' E') := intv U U' /\ int (d U) E E';
  int M (let (shift0 E) T) (shift0 k\ E' (o\ k (let o T'))) := nabla x k, stan g (E k) (E' k) /\ stan M (T x) (T' x);
  %int M (let (let E T1) T2) (let E' T') := int g E E' /\ nabla x, int M (let (T1 x) T2) (T' x);
  int M (let (let E T1) T2) (let E' x\ let (T1' x) T2') := int g E E' /\ nabla x, stan g (T1 x) (T1' x) /\ stan M (T2 x) (T2' x);
  nabla k, int (M k) (k (E k)) (k (E' k)) := nabla k, int g (E k) (E' k);
  int (d U) (shift0 E) (shift0 k\ E' (delim U')) := nabla k, stan g (E k) (E' k) /\ intv U U';
  int (d U) (shift0 k_\ ret V) (ret V') := intv V V';
  int (d U) (shift0 k_\ delim U E) E' := stan g E E';

  stan M E E' := exists E'', many step E E'' /\ int M E'' E'.


Theorem intg_intds :
  (forall E E' U, int g E E' -> int (d U) E E') /\
  (forall E E' U, stan g E E' -> stan (d U) E E').
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    apply IH1 to H3 with U = U. search.
    search.
    search.
    apply IH1 to H3 with U = U. search.
    apply IH1 to H4 with U = U. search.
    search.
  intros. case H1.
    apply IH to H3 with U = U. search.

Split intg_intds as intg_intd, stang_stand.

Theorem int_ret : forall E V, int g E (ret V) -> exists V', E = ret V'.
  intros. case H1. search.

Theorem subvs :
  (forall M E E' U U', nabla x, int (M x) (E x) (E' x) -> intv U U' -> int (M U) (E U) (E' U')) /\
  (forall E E' U U', nabla x, intv (E x) (E' x) -> intv U U' -> intv (E U) (E' U')) /\
  (forall M E E' U U', nabla x, stan (M x) (E x) (E' x) -> intv U U' -> stan (M U) (E U) (E' U')).
  induction on 1 1 1. split.
  intros. case H1.
    apply IH1 to H3 H2. search.
    apply IH1 to H3 H2. apply IH1 to H4 H2. search.
    apply IH to H3 H2. apply IH2 to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH2 to H4 H2. apply IH2 to H5 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH2 to H3 H2. search.
  intros. case H1.
    search.
    search.
    apply IH2 to H3 H2. search.
  intros. case H1.
    apply steps_subv to H3 with U = U. apply IH to H4 H2. search.

Split subvs as int_subv, intv_subv, stan_subv.

Theorem subdelims :
  forall U U', intv U U' ->
  (forall M E E', nabla k, int (M k) (E k) (E' k) -> int (M (delim U)) (E (delim U)) (E' (delim U'))) /\
  (forall E E', nabla k, intv (E k) (E' k) -> intv (E (delim U)) (E' (delim U'))) /\
  (forall M E E', nabla k, stan (M k) (E k) (E' k) -> stan (M (delim U)) (E (delim U)) (E' (delim U'))).
  intros. induction on 1 1 1. split.
  intros. case H2.
    apply IH1 to H3. search.
    apply IH1 to H3. apply IH1 to H4. search.
    apply IH to H3. apply IH2 to H4. search.
    apply IH2 to H3. search.
    apply IH1 to H3. apply IH to H4. search.
    apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H3. apply IH2 to H4. apply IH2 to H5. search.
    apply IH to H3. search.
    apply IH to H3. apply intg_intd to H4 with U = U. search.
    apply IH2 to H3. apply IH1 to H4. search.
    apply IH1 to H3. search.
    apply IH2 to H3. search.
  intros. case H2.
    search.
    apply IH2 to H3. search.
  intros. case H2.
    apply steps_subdelim to H3 with U = U. apply IH to H4. search.

Split subdelims as int_subdelim, intv_subdelim, stan_subdelim.

Theorem sublets :
  forall T T', (nabla x, stan g (T x) (T' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ k (let o T))) (E (o\ k (let o T))) (E' (o\ k (let o T')))) /\
  (forall E E', nabla (k : expr -> expr), intv (E k) (E' k) -> intv (E (o\ k (let o T))) (E' (o\ k (let o T')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ k (let o T))) (E (o\ k (let o T))) (E' (o\ k (let o T')))).
  intros. induction on 1 1 1. split.
  intros. case H2.
    apply IH1 to H3. search.
    apply IH1 to H3. apply IH1 to H4. search.
    apply IH to H3. apply IH2 to H4. search.
    apply IH2 to H3. search.
    apply IH1 to H3. apply IH to H4. search.
    apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H3. apply IH2 to H4. apply IH2 to H5. search.
    apply IH to H3. search.
    apply IH to H3. search.
    apply IH2 to H3. apply IH1 to H4. search.
    apply IH1 to H3. search.
    apply IH2 to H3. search.
  intros. case H2.
    search.
    apply IH2 to H3. search.
  intros. case H2.
    apply steps_sublet to H3 with T = T. apply IH to H4. search.

Split sublets as int_sublet, intv_sublet, stan_sublet.
Theorem stan_sublet :
  (forall M E E' T T', nabla (k : expr -> expr) x, stan g (T x) (T' x) -> stan (M k) (E k) (E' k) -> stan (M (o\ k (let o T))) (E (o\ k (let o T))) (E' (o\ k (let o T')))).
  intros. assert (nabla x, stan g (T x) (T' x)). apply stan_sublet to H3 H2. search.

Theorem subdlets :
  forall T T' U U', (nabla x, stan (d U) (T x) (T' x) /\ intv U U') ->
  (forall M E E', nabla k, int (M k) (E k) (E' k) -> int (M (o\delim U (let o T))) (E (o\delim U (let o T))) (E' (o\ delim U' (let o T')))) /\
  (forall E E', nabla k, intv (E k) (E' k) -> intv (E (o\delim U (let o T))) (E' (o\ delim U' (let o T')))) /\
  (forall M E E', nabla k, stan (M k) (E k) (E' k) -> stan (M (o\delim U (let o T))) (E (o\delim U (let o T))) (E' (o\ delim U' (let o T')))).
  intros. induction on 1 1 1. split.
  intros. case H2.
    apply IH1 to H3. search.
    apply IH1 to H3. apply IH1 to H4. search.
    apply IH to H3. apply IH2 to H4. search.
    apply IH2 to H3. search.
    apply IH1 to H3. apply IH to H4. search.
    apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H3. apply IH2 to H4. apply IH2 to H5. search.
    apply IH to H3. search.
    apply IH to H3. case H1. search.
    apply IH2 to H3. apply IH1 to H4. search.
    apply IH1 to H3. search.
    apply IH2 to H3. search.
  intros. case H2.
    search.
    apply IH2 to H3. search.
  intros. case H2.
    apply steps_sublet to H3 with T = T. apply steps_subdelim to H5 with U = U. apply IH to H4. search.


Split subdlets as int_subdlet, intv_subdlet, stan_subdlet.

Theorem subllets :
  forall T1 T1' T2 T2', (nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ k (let (let o T1) T2))) (E (o\ k (let (let o T1) T2))) (E' (o\ k (let o x\ let (T1' x) T2')))) /\
  (forall E E', nabla (k : expr -> expr), intv (E k) (E' k) -> intv (E (o\ k (let (let o T1) T2))) (E' (o\ k (let o x\ let (T1' x) T2')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ k (let (let o T1) T2))) (E (o\ k (let (let o T1) T2))) (E' (o\ k (let o x\ let (T1' x) T2')))).
  intros. induction on 1 1 1. split.
  intros. case H2.
    apply IH1 to H3. search.
    apply IH1 to H3. apply IH1 to H4. search.
    apply IH to H3. apply IH2 to H4. search.
    apply IH2 to H3. search.
    apply IH1 to H3. apply IH to H4. search.
    apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H3. apply IH2 to H4. apply IH2 to H5. search.
    apply IH to H3. search.
    apply IH to H3. search.
    apply IH2 to H3. apply IH1 to H4. search.
    apply IH1 to H3. search.
    apply IH2 to H3. search.
  intros. case H2.
    search.
    apply IH2 to H3. search.
  intros. case H2.
    apply steps_sublet to H3 with T = T1. apply steps_sublet to H5 with T = T2. apply IH to H4. search.

Split subllets as int_subllet, intv_subllet, stan_subllet.

Theorem subdllets :
  forall U U' T1 T1' T2 T2', (nabla x, intv U U' /\ stan g (T1 x) (T1' x) /\ stan (d U) (T2 x) (T2' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ delim U (let (let o T1) T2))) (E (o\ delim U (let (let o T1) T2))) (E' (o\ delim U' (let o x\ let (T1' x) T2')))) /\
  (forall E E', nabla (k : expr -> expr), intv (E k) (E' k) -> intv (E (o\ delim U (let (let o T1) T2))) (E' (o\ delim U' (let o x\ let (T1' x) T2')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ delim U (let (let o T1) T2))) (E (o\ delim U (let (let o T1) T2))) (E' (o\ delim U' (let o x\ let (T1' x) T2')))).
  intros. induction on 1 1 1. split.
  intros. case H2.
    apply IH1 to H3. search.
    apply IH1 to H3. apply IH1 to H4. search.
    apply IH to H3. apply IH2 to H4. search.
    apply IH2 to H3. search.
    apply IH1 to H3. apply IH to H4. search.
    apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H3. apply IH2 to H4. apply IH2 to H5. search.
    apply IH to H3. search.
    apply IH to H3. case H1. search.
    apply IH2 to H3. apply IH1 to H4. search.
    apply IH1 to H3. search.
    apply IH2 to H3. search.
  intros. case H2.
    search.
    apply IH2 to H3. search.
  intros. case H2.
    apply steps_sublet to H3 with T = T1. apply steps_sublet to H5 with T = T2. apply steps_subdelim to H6 with U = U. apply IH to H4. search.

Split subdllets as int_subdllet, intv_subdllet, stan_subdllet.


Theorem subks :
  (forall M E E', nabla (k l : expr -> expr), int (M k l) (E k l) (E' k l) -> int (M k k) (E k k) (E' k k)) /\
  (forall E E', nabla (k l : expr -> expr), intv (E k l) (E' k l) -> intv (E k k) (E' k k)) /\
  (forall M E E', nabla (k l : expr -> expr), stan (M k l) (E k l) (E' k l) -> stan (M k k) (E k k) (E' k k)).
  induction on 1 1 1. split.
  intros. case H1.
    apply IH1 to H2. search.
    apply IH1 to H2. apply IH1 to H3. search.
    apply IH to H2. apply IH2 to H3. search.
    apply IH2 to H2. search.
    apply IH1 to H2. apply IH to H3. search.
    apply IH2 to H2. apply IH2 to H3. search.
    apply IH to H2. apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH2 to H2. apply IH1 to H3. search.
    apply IH1 to H2. search.
    apply IH2 to H2. search.
  intros. case H1.
    search.
    apply IH2 to H2. search.
  intros. case H1.
    apply steps_subk to H2. apply IH to H3. search.

Split subks as int_subk, intv_subk, stan_subk.


Theorem steps_cong_let :
  forall E E' T, many step E E' -> many step (let E T) (let E' T).
  induction on 1.
  intros. case H1.
    search.
    apply IH to H3 with T = T. search.

Theorem steps_cong_delim :
  forall U E E', many step E E' -> many step (delim U E) (delim U E').
  induction on 1.
  intros. case H1.
    search.
    apply IH to H3 with U = U. search.

Theorem steps_cong_k :
  forall E E', nabla k, many step (E k) (E' k) -> many step (k (E k)) (k (E' k)).
  induction on 1.
  intros. case H1.
    search.
    apply IH to H3. search.


Theorem stang_stanM : forall M E E', stan g E E' -> md M -> stan M E E'.
  intros. case H2.
    search.
    backchain stang_stand.

Theorem wrap[X] : forall T T', nabla (x:X), stan g (T x) (T' x) -> (nabla x, stan g (T x) (T' x)).
  intros. search.

Theorem posts :
  (forall M E E'' E', int M E E'' -> step E'' E' -> md M -> stan M E E') /\
  (forall E E'' E', int g E E'' -> stepc E'' E' -> exists E''', nabla k, stepc E E''' /\ stan g (E''' k) (E' k)).
  induction on 1 1. split.
  intros. case H1.
    case H2.
    backchain stang_stanM. case H2. case H4. apply stan_subv to H6 H5. case H7. search.
    case H2.
      case H4. apply stan_subv to H5 H6. case H7. search.
      apply IH to H4 H6 _. case H7. apply steps_cong_let to H8 with T = T. search.
    case H2.
    backchain stang_stanM. case H2.
      case H5.
        search.
        search.
        case H6. case H8. apply steps_cong_delim to H7 with U = U. assert many step (delim U (ret V1)) (ret V1). apply steps_app to H10 H11. search.
      case H6.
        case H5.
          apply stan_subdelim to H4 H7. case H8. search.
          apply stan_subdlet to _ H7. case H9. search.
          apply stan_subdelim to H8 H7. case H9. search.
          case H7. apply steps_cong_delim to H8 with U = U. case H9.
            apply stan_subdelim to H4 H11. assert many step (delim U (shift0 E3)) (E3 (delim U)). apply steps_app to H10 H13. case H12. apply steps_app to H14 H15. search.
            apply stan_sublet to H12 H11. apply stan_subdelim to H4 H13. case H14. assert many step (delim U (let (shift0 E3) T)) (E3 (o\ delim U (let o T))). apply steps_app to H17 H15. apply steps_app to H10 H18. search.
        case H5.
          apply IH1 to H8 H7. apply stan_subdlet to _ H11. case H12. search.
          apply IH1 to H8 H7. apply stan_subdllet to _ H12. case H13. search.
          case H8. case H10.
            apply IH1 to H11 H7. apply stan_sublet to _ H14. apply stan_subdelim to H4 H15. case H16. apply steps_cong_delim to H9 with U = U. assert many step (delim U (let E4 T1)) (E''' (o\ delim U (let o T1))). apply steps_app to H19 H20. apply steps_app to H21 H17. search.
            apply IH1 to H11 H7. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x). apply stan_subllet to H16 H15. apply stan_subdelim to H4 H17. case H18. apply steps_cong_delim to H9 with U = U. assert many step (delim U (let (let E4 T1) T2)) (E''' (o\ delim U (let (let o T1) T2))). apply steps_app to H21 H22. apply steps_app to H23 H19. search.
      apply IH to H5 H6 _. case H7. apply steps_cong_delim to H8 with U = U. search.
    case H2.
    case H2.
      case H4. apply stan_subv to H5 H7. case H8. apply steps_cong_let to H9 with T = T2. search.
      apply IH to H4 H7 _. case H8. apply steps_cong_let to H9 with T = T1. apply steps_cong_let to H11 with T = T2. search.
    backchain stang_stanM. case H2.
      apply IH1 to H4 H5. apply stan_subk to H7. case H8. search.
      apply IH to H4 H5 _. case H6. apply steps_cong_k to H7. search.
    case H2.
    case H2. case H4. apply IH to H6 H2 _. case H7. apply steps_app to H5 H8. search.
  intros. case H1.
    case H2.
    case H2.
    case H2. apply IH1 to H3 H5. apply stan_sublet to H4 H7. search.
    case H2. search.
    case H2.
    case H2. apply stan_sublet to H4 H3. search.
    case H2. apply IH1 to H3 H6. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x). apply stan_subllet to H9 H8. search.
    case H2.

Split posts as post, postc.

Theorem post_many : forall E E'' E', int g E E'' -> many step E'' E' -> stan g E E'.
  induction on 2.
  intros. case H2.
    search.
    apply post to H1 H3 _. case H5. apply IH to H7 H4. case H8. apply steps_app to H6 H9. search.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem step?_cong_let :
  forall E E' T, maybe step E E' -> maybe step (let E T) (let E' T).
  intros. case H1. search. search.

Theorem step?_cong_delim :
  forall U E E', maybe step E E' -> maybe step (delim U E) (delim U E').
  intros. case H1. search. search.

Theorem step?_cong_k :
  forall E E', nabla k, maybe step (E k) (E' k) -> maybe step (k (E k)) (k (E' k)).
  intros. case H1. search. search.

Theorem qscomms :
  (forall M E1 E2 E3, int M E1 E2 -> step E1 E3 -> md M -> exists E4, maybe step E2 E4 /\ stan M E3 E4) /\
  (forall E1 E2 E3, int g E1 E2 -> stepc E1 E3 -> exists E4, stepc E2 E4 /\ nabla k, stan g (E3 k) (E4 k)).
  induction on 1 1. split.
  intros. case H2.
    case H1. case H4. apply stan_subv to H5 H6. search.
    case H1. case H4. apply stan_subv to H6 H5. apply stang_stanM to H7 _. search.
    case H1. case H5. search.
    case H1.
    case H1. case H4.
      case H6.
        apply stan_subdelim to H5 H7. apply stang_stanM to H8 _. search.
        apply stan_subdelim to H8 H7. apply stang_stanM to H9 _. search.
        search.
        case H7. apply steps_cong_delim to H8 with U = U. apply intg_intd to H9 with U = U. search.
      case H6.
        apply IH1 to H8 H7. apply stan_subdlet to _ H11. apply stang_stanM to H12 _. search.
        case H7. apply stan_subdlet to _ H8. apply stang_stanM to H10 _. search.
        case H7. apply IH1 to H8 H11. assert nabla x, intv U U' /\ stan g (T1 x) (T1' x) /\ stan (d U) (T x) (T2' x). apply stan_subdllet to H14 H13. apply stang_stanM to H15 _. search.
    case H1. apply IH1 to H5 H4. apply stan_subk to H7. apply stang_stanM to H8 _. search.
    case H1. apply IH to H6 H4 _. case H8. apply steps_cong_delim to H9 with U = U. apply step?_cong_delim to H7 with U = U'. search.
    case H1.
      apply IH to H5 H4 _. case H8. apply steps_cong_let to H9 with T = T. apply step?_cong_let to H7 with T = T'. search.
      case H4.
      case H4.
        case H5. apply stan_subv to H6 H8. case H9. apply steps_cong_let to H10 with T = T. search.
        apply IH to H5 H8 _. case H10. apply steps_cong_let to H11 with T = T1. apply steps_cong_let to H13 with T = T. apply step?_cong_let to H9 with T = (x\ let (T1' x) T2'). search.
    case H1. apply IH to H5 H4 _. case H7. apply steps_cong_k to H8. apply step?_cong_k to H6. search.
  intros. case H2.
    case H1. search.
    case H1.
      apply IH1 to H4 H3. apply stan_sublet to _ H7. search.
      case H3. apply stan_sublet to H5 _. search.
      case H3. apply IH1 to H4 H7. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T x) (T2' x). apply stan_subllet to H10 H9. search.

Split qscomms as qscomm, qscommc.

Theorem stepc_step : forall E E' E'', stepc E E' -> step E E'' -> false.
  induction on 1.
  intros. case H1.
    case H2.
    case H2.
      case H3.
      apply IH to H3 H4.

Theorem step_dets :
  (forall E E' E'', step E E' -> step E E'' -> E' = E'') /\
  (forall E E' E'', stepc E E' -> stepc E E'' -> E' = E'').
  induction on 1 1. split.
  intros. case H1.
    case H2.
      search.
      case H3.
    case H2. search.
    case H2.
      search.
      case H3.
      case H3.
    case H2. search.
    case H2.
      case H3.
      apply IH1 to H3 H4. search.
      apply stepc_step to H3 H4.
    case H2.
      apply IH1 to H3 H4. search.
      apply stepc_step to H3 H4.
    case H2.
      case H3.
      apply stepc_step to H4 H3.
      apply IH to H3 H4. search.
    case H2.
      case H3.
      apply IH to H3 H4. search.
    case H2.
      apply stepc_step to H4 H3.
      apply IH to H3 H4. search.
  intros. case H1.
    case H2. search.
    case H2. apply IH1 to H3 H4. search.

Split step_dets as step_det, stepc_det.

Theorem subcomm_ : forall E1 E12 E2 E3, many step E1 E12 -> int g E12 E2 -> step E1 E3 -> exists E4, maybe step E2 E4 /\ stan g E3 E4.
  induction on 1.
  intros. case H1.
    apply qscomm to H2 H3 _. search.
    apply step_det to H3 H4. search.

Theorem subcomm : forall E1 E2 E3, stan g E1 E2 -> step E1 E3 -> exists E4, maybe step E2 E4 /\ stan g E3 E4.
  intros. case H1. backchain subcomm_.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Define is_expr : expr -> prop,
       is_val : val -> prop by
  nabla x, is_val x;
  is_val (lam E) := nabla x, is_expr (E x);

  is_expr (app V U) := is_val V /\ is_val U;
  is_expr (let E T) := is_expr E /\ nabla x, is_expr (T x);
  is_expr (delim U E) := is_val U /\ is_expr E;
  is_expr (shift0 E) := nabla k, is_expr (E k);
  is_expr (ret V) := is_val V;
  nabla k, is_expr (k (E k)) := nabla k, is_expr (E k).


Theorem refls :
  (forall E, is_expr E -> int g E E) /\
  (forall V, is_val V -> intv V V).
  induction on 1 1. split.
  intros. case H1.
    apply IH1 to H2. apply IH1 to H3. search.
    apply IH to H2. apply IH to H3. search.
    apply IH1 to H2. apply IH to H3. apply intg_intd to H5 with U = U. search.
    apply IH to H2. search.
    apply IH1 to H2. search.
    apply IH to H2. search.
  intros. case H1.
    search.
    apply IH to H2. search.

Split refls as int_refl, intv_refl.

Define red : expr -> expr -> prop,
       redd : val -> expr -> expr -> prop,
       redv : val -> val -> prop by
  redv (lam E) (lam E') := nabla x, red (E x) (E' x);

  red (app (lam E) V) (E V) := nabla x, is_expr (E x) /\ is_val V;
  red (let (ret V) T) (T V) := nabla x, is_expr (T x) /\ is_val V;
  red (delim U (shift0 E)) (E (delim U)) := nabla x, is_expr (E x) /\ is_val U;
  red (let (shift0 E) T) (shift0 k\ E (o\ k (let o T))) := nabla x k, is_expr (E k) /\ is_expr (T x);
  red (let (let E T1) T2) (let E x\ let (T1 x) T2) := nabla x, is_expr E /\ is_expr (T1 x) /\ is_expr (T2 x);
  nabla k, red (k (shift0 (E k))) (E k k) := nabla k, is_expr (E k k);
  redd U (shift0 E) (shift0 k\ (E (delim U))) := nabla k, is_expr (E k) /\ is_val U;
  redd U (shift0 k\ ret V) (ret V) := is_val V /\ is_val U;
  redd U (shift0 k\ delim U E) E := is_expr E /\ is_val U;

  red (app V U) (app V' U) := redv V V' /\ is_val U;
  red (app V U) (app V U') := redv U U' /\ is_val V;
  red (let E T) (let E' T) := red E E' /\ nabla x, is_expr (T x);
  red (let E T) (let E T') := nabla x, red (T x) (T' x) /\ is_expr E;
  red (shift0 E) (shift0 E') := nabla k, red (E k) (E' k);
  red (delim U E) (delim U E') := red E E' /\ is_val U;
  red (delim U E) (delim U E') := redd U E E' /\ is_val U;
  red (delim U E) (delim U' E) := redv U U' /\ is_expr E;
  red (ret V) (ret V') := redv V V';
  nabla k, red (k (E k)) (k (E' k)) := nabla k, red (E k) (E' k);
  redd U (let E T) (let E T') := nabla x, is_expr E /\ redd U (T x) (T' x).

Theorem red_stans :
  (forall E E', red E E' -> stan g E E') /\
  (forall V V', redv V V' -> intv V V') /\
  (forall U E E', redd U E E' -> int (d U) E E').
  induction on 1 1 1. split.
  intros. case H1.
    apply int_refl to H2. apply intv_refl to H3. apply int_subv to H4 H5. search.
    apply int_refl to H2. apply intv_refl to H3. apply int_subv to H4 H5. search.
    apply int_refl to H2. apply intv_refl to H3. apply int_subdelim to H5 H4. search.
    apply int_refl to H3. apply int_refl to H2. apply int_sublet to _ H5. search.
    apply int_refl to H2. apply int_refl to H3. apply int_refl to H4. search.
    apply int_refl to H2. search.
    apply IH1 to H2. apply intv_refl to H3. search.
    apply IH1 to H2. apply intv_refl to H3. search.
    apply IH to H2. apply int_refl to H3. case H4. apply steps_cong_let to H6 with T = T. search.
    apply IH to H2. apply int_refl to H3. search.
    apply IH to H2. search.
    apply IH to H2. case H4. apply steps_cong_delim to H5 with U = U. apply intg_intd to H6 with U = U. apply intv_refl to H3. search.
    apply IH2 to H2. apply intv_refl to H3. search.
    apply IH1 to H2. apply int_refl to H3. apply intg_intd to H5 with U = U. search.
    apply IH1 to H2. search.
    apply IH to H2. case H3. apply steps_cong_k to H4. search.
  intros. case H1.
    apply IH to H2. search.
  intros. case H1.
    apply int_refl to H2. apply intv_refl to H3. search.
    apply intv_refl to H2. search.
    apply int_refl to H2. search.
    apply int_refl to H2. apply IH2 to H3. search.

Split red_stans as red_stang, redv_intv, redd_intd.

Theorem strong_comm : forall E1 E2 E3, stan g E1 E2 -> many step E1 E3 -> exists E4, many step E2 E4 /\ stan g E3 E4.
  induction on 2.
  intros. case H2.
    search.
    apply subcomm to H1 H3. apply IH to H6 H4. case H5.
      search.
      search.

Theorem stan : forall E E', many red E E' -> exists E'', many step E E'' /\ many (int g) E'' E'.
  induction on 1.
  intros. case H1.
    search.
    apply red_stang to H2. case H4. apply IH to H3. apply post_many to H6 H7. case H9. apply steps_app to H5 H10. search.

Theorem adq1 : forall E E' V', red E E' -> many step E' (ret V') -> exists V, many step E (ret V).
  intros.
  apply red_stang to H1. case H3. apply post_many to H5 H2. case H6. case H8. apply steps_app to H4 H7. search.

Theorem adq2 : forall E E' V, red E E' -> many step E (ret V) -> exists V', many step E' (ret V').
  intros.
  apply red_stang to H1. apply strong_comm to H3 H2. case H5. case H6.
    case H7. search.
    case H8.
