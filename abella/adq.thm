% vim: et

Import "syntax".

%%% INTERNAL PARALLEL REDUCTION AND STANDARD REDUCTION %%%%%%%%%%%%%%%%%%%%%%%%%

Kind mode type.
Type g mode.
Type d val -> mode.

Define md : mode -> prop by
  md g; md (d V).

Define int : mode -> expr -> expr -> prop,
       intv : val -> val -> prop,
       stan : mode -> expr -> expr -> prop,
       intk : expr -> expr -> prop,
       inte : mode -> expr -> expr -> prop by
  nabla x, intv x x;
  intv (lam E) (lam E') := nabla x, stan g (E x) (E' x);

  int M (ret V) (ret V') := intv V V';
  int M (app V U) (app V' U') := intv V V' /\ intv U U';
  int M (let E T) (let E' T') := int g E E' /\ nabla x, stan M (T x) (T' x);
  int M (shift0 E) (shift0 E') := nabla k, stan g (E k) (E' k);
  int M (delim U E) (delim U' E') := intv U U' /\ int (d U) E E';
  int M (ask K) (ask K') := intk K K';
  int M (let (shift0 E) T) (shift0 k\ E' (o\ k (let o T'))) := nabla x k, stan g (E k) (E' k) /\ stan M (T x) (T' x);
  int M (let (let E T1) T2) (let E' x\ let (T1' x) T2') := int g E E' /\ nabla x, stan g (T1 x) (T1' x) /\ stan M (T2 x) (T2' x);
  nabla k, int (M k) (k (E k)) (k (E' k)) := nabla k, int g (E k) (E' k);
  int (d U) (shift0 E) (shift0 k\ E' (delim U')) := nabla k, stan g (E k) (E' k) /\ intv U U';
  int (d U) (shift0 k_\ ret V) (ret V') := intv V V';
  int (d U) (shift0 k_\ delim U E) E' := stan g E E';

  nabla k, intk (k (E k)) (k (E' k)) := nabla k, inte g (E k) (E' k);
  intk (delim U E) (delim U' E') := intv U U' /\ inte (d U) E E';

  inte M hole hole;
  inte M (let E T) (let E' T') := inte g E E' /\ nabla x, stan M (T x) (T' x);
  inte M (let (let E T1) T2) (let E' x\ let (T1' x) T2') := inte g E E' /\ nabla x, stan g (T1 x) (T1' x) /\ stan M (T2 x) (T2' x);

  stan M E E' := exists E'', many step E E'' /\ int M E'' E'.

Theorem intg_intds :
  (forall E E' U, int g E E' -> int (d U) E E') /\
  (forall E E' U, stan g E E' -> stan (d U) E E').
  induction on 1 1. split.
  intros. case H1.
    search.
    search.
    apply IH1 to H3 with U = U. search.
    search.
    search.
    search.
    apply IH1 to H3 with U = U. search.
    apply IH1 to H4 with U = U. search.
    search.
  intros. case H1.
    apply IH to H3 with U = U. search.

Split intg_intds as intg_intd, stang_stand.

Theorem integ_inted :
  (forall E E' U, inte g E E' -> inte (d U) E E').
  induction on 1.
  intros. case H1.
    search.
    apply stang_stand to H3 with U = U. search.
    apply stang_stand to H4 with U = U. search.

Theorem subvs :
  (forall M E E' U U', nabla x, int (M x) (E x) (E' x) -> intv U U' -> int (M U) (E U) (E' U')) /\
  (forall E E' U U', nabla x, intv (E x) (E' x) -> intv U U' -> intv (E U) (E' U')) /\
  (forall M E E' U U', nabla x, stan (M x) (E x) (E' x) -> intv U U' -> stan (M U) (E U) (E' U')) /\
  (forall E E' U U', nabla x, intk (E x) (E' x) -> intv U U' -> intk (E U) (E' U')) /\
  (forall M E E' U U', nabla x, inte (M x) (E x) (E' x) -> intv U U' -> inte (M U )(E U) (E' U')).
  induction on 1 1 1 1 1. split.
  intros. case H1.
    apply IH1 to H3 H2. search.
    apply IH1 to H3 H2. apply IH1 to H4 H2. search.
    apply IH to H3 H2. apply IH2 to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH3 to H3 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH2 to H4 H2. apply IH2 to H5 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH2 to H3 H2. search.
  intros. case H1.
    search.
    search.
    apply IH2 to H3 H2. search.
  intros. case H1.
    apply steps_subv to H3 with U = U. apply IH to H4 H2. search.
  intros. case H1.
    apply IH4 to H3 H2. search.
    apply IH1 to H3 H2. apply IH4 to H4 H2. search.
  intros. case H1.
    search.
    apply IH4 to H3 H2. apply IH2 to H4 H2. search.
    apply IH4 to H3 H2. apply IH2 to H4 H2. apply IH2 to H5 H2. search.

Split subvs as int_subv, intv_subv, stan_subv, intk_subv, inte_subv.

Theorem int_subdcs :
  forall D D',
  (forall N O O', nabla l, int g (O l) (O' l) -> int (N l) (D l (O l)) (D' l (O' l))) ->
  (forall X X', nabla l, many step (X l) (X' l) -> many step (X (D l)) (X' (D l))) ->
  (forall O O', nabla l, inte g (O l) (O' l) -> intk (D l (O l)) (D' l (O' l))) ->
  (forall M E E', nabla k, int (M k) (E k) (E' k) -> int (M (D k)) (E (D k)) (E' (D' k))) /\
  (forall E E', nabla k, intv (E k) (E' k) -> intv (E (D k)) (E' (D' k))) /\
  (forall M E E', nabla k, stan (M k) (E k) (E' k) -> stan (M (D k)) (E (D k)) (E' (D' k))) /\
  (forall E E', nabla k, intk (E k) (E' k) -> intk (E (D k)) (E' (D' k))) /\
  (forall M E E', nabla k, inte (M k) (E k) (E' k) -> inte (M (D k)) (E (D k)) (E' (D' k))).
  intros. induction on 1 1 1 1 1. split.
  intros. case H4.
    apply IH1 to H5. search.
    apply IH1 to H5. apply IH1 to H6. search.
    apply IH to H5. apply IH2 to H6. search.
    apply IH2 to H5. search.
    apply IH1 to H5. apply IH to H6. search.
    apply IH3 to H5. search.
    apply IH2 to H5. apply IH2 to H6. search.
    apply IH to H5. apply IH2 to H6. apply IH2 to H7. search.
    apply IH to H5. search.
    apply IH to H5. apply H1 to H6 with N = (l\M (D l)). search.
    apply IH2 to H5. apply IH1 to H6. search.
    apply IH1 to H5. search.
    apply IH2 to H5. search.
  intros. case H4.
    search.
    apply IH2 to H5. search.
  intros. case H4. apply H2 to H5. apply IH to H6. search.
  intros. case H4.
    apply IH4 to H5. search.
    apply IH4 to H5. apply H3 to H6. search.
    apply IH1 to H5. apply IH4 to H6. search.
  intros. case H4.
    search.
    apply IH4 to H5. apply IH2 to H6. search.
    apply IH4 to H5. apply IH2 to H6. apply IH2 to H7. search.

Theorem int_subdelims :
  forall U U', intv U U' ->
  (forall M E E', nabla k, int (M k) (E k) (E' k) -> int (M (delim U)) (E (delim U)) (E' (delim U'))) /\
  (forall M E E', nabla k, stan (M k) (E k) (E' k) -> stan (M (delim U)) (E (delim U)) (E' (delim U'))).
  intros. apply int_subdcs to _ _ _ with D = l\delim U, D' = l\delim U'.
    intros. apply integ_inted to H2 with U = U. search.
    intros. apply steps_subdelim to H2 with U = U. search.
    intros. apply intg_intd to H2 with U = U. search.
  search.
Split int_subdelims as int_subdelim, stan_subdelim.

Theorem int_sublets :
  forall T T', (nabla x, stan g (T x) (T' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ k (let o T))) (E (o\ k (let o T))) (E' (o\ k (let o T')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ k (let o T))) (E (o\ k (let o T))) (E' (o\ k (let o T')))).
  intros. apply int_subdcs to _ _ _ with D = l\o\ l (let o T), D' = l\o\ l (let o T').
    intros. apply steps_sublet to H2 with T = T. search.
  search.
Split int_sublets as int_sublet, stan_sublet.

Theorem int_subdlets :
  forall T T' U U', (nabla x, stan (d U) (T x) (T' x) /\ intv U U') ->
  (forall M E E', nabla k, int (M k) (E k) (E' k) -> int (M (o\delim U (let o T))) (E (o\delim U (let o T))) (E' (o\ delim U' (let o T')))) /\
  (forall M E E', nabla k, stan (M k) (E k) (E' k) -> stan (M (o\delim U (let o T))) (E (o\delim U (let o T))) (E' (o\ delim U' (let o T')))).
  intros. case H1. apply int_subdcs to _ _ _ with D = l\o\delim U (let o T), D' = l\o\delim U' (let o T').
    intros. apply steps_sublet to H4 with T = T. apply steps_subdelim to H5 with U = U. search.
  search.
Split int_subdlets as int_subdlet, stan_subdlet.

Theorem int_subllets :
  forall T1 T1' T2 T2', (nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ k (let (let o T1) T2))) (E (o\ k (let (let o T1) T2))) (E' (o\ k (let o x\ let (T1' x) T2')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ k (let (let o T1) T2))) (E (o\ k (let (let o T1) T2))) (E' (o\ k (let o x\ let (T1' x) T2')))).
  intros. case H1. apply int_subdcs to _ _ _ with D = l\o\l (let (let o T1) T2), D' = l\o\l (let o x\ (let (T1' x) T2')).
    intros. apply steps_sublet to H4 with T = T1. apply steps_sublet to H5 with T = T2. search.
  search.
Split int_subllets as int_subllet, stan_subllet.

Theorem int_subdllets :
  forall U U' T1 T1' T2 T2', (nabla x, intv U U' /\ stan g (T1 x) (T1' x) /\ stan (d U) (T2 x) (T2' x)) ->
  (forall M E E', nabla (k : expr -> expr), int (M k) (E k) (E' k) -> int (M (o\ delim U (let (let o T1) T2))) (E (o\ delim U (let (let o T1) T2))) (E' (o\ delim U' (let o x\ let (T1' x) T2')))) /\
  (forall M E E', nabla (k : expr -> expr), stan (M k) (E k) (E' k) -> stan (M (o\ delim U (let (let o T1) T2))) (E (o\ delim U (let (let o T1) T2))) (E' (o\ delim U' (let o x\ let (T1' x) T2')))).
  intros. case H1. apply int_subdcs to _ _ _ with D = l\o\ delim U (let (let o T1) T2), D' = l\o\ delim U' (let o x\ let (T1' x) T2').
    intros. apply steps_sublet to H5 with T = T1. apply steps_sublet to H6 with T = T2. apply steps_subdelim to H7 with U = U. search.
  search.
Split int_subdllets as int_subdllet, stan_subdllet.

Theorem contrks :
  (forall M E E', nabla (k l : expr -> expr), int (M k l) (E k l) (E' k l) -> int (M k k) (E k k) (E' k k)) /\
  (forall E E', nabla (k l : expr -> expr), intv (E k l) (E' k l) -> intv (E k k) (E' k k)) /\
  (forall M E E', nabla (k l : expr -> expr), stan (M k l) (E k l) (E' k l) -> stan (M k k) (E k k) (E' k k)) /\
  (forall E E', nabla (k l : expr -> expr), intk (E k l) (E' k l) -> intk (E k k) (E' k k)) /\
  (forall M E E', nabla (k l : expr -> expr), inte (M k l) (E k l) (E' k l) -> inte (M k k) (E k k) (E' k k)).
  induction on 1 1 1 1 1. split.
  intros. case H1.
    apply IH1 to H2. search.
    apply IH1 to H2. apply IH1 to H3. search.
    apply IH to H2. apply IH2 to H3. search.
    apply IH2 to H2. search.
    apply IH1 to H2. apply IH to H3. search.
    apply IH3 to H2. search.
    apply IH2 to H2. apply IH2 to H3. search.
    apply IH to H2. apply IH2 to H3. apply IH2 to H4. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH2 to H2. apply IH1 to H3. search.
    apply IH1 to H2. search.
    apply IH2 to H2. search.
  intros. case H1.
    search.
    apply IH2 to H2. search.
  intros. case H1.
    apply steps_contrk to H2. apply IH to H3. search.
  intros. case H1.
    apply IH4 to H2. search.
    apply IH4 to H2. search.
    apply IH4 to H2. search.
    apply IH1 to H2. apply IH4 to H3. search.
  intros. case H1.
    search.
    apply IH4 to H2. apply IH2 to H3. search.
    apply IH4 to H2. apply IH2 to H3. apply IH2 to H4. search.

Split contrks as int_contrk, intv_contrk, stan_contrk.

Theorem stang_stanM : forall M E E', stan g E E' -> md M -> stan M E E'.
  intros. case H2.
    search.
    backchain stang_stand.

Theorem wrap[X] : forall T T', nabla (x:X), stan g (T x) (T' x) -> (nabla x, stan g (T x) (T' x)).
  intros. search.

Theorem refls :
  (forall E, is_expr E -> int g E E) /\
  (forall V, is_val V -> intv V V) /\
  (forall E, is_evctx E -> inte g E E).
  induction on 1 1 1. split.
  intros. case H1.
    apply IH1 to H2. apply IH1 to H3. search.
    apply IH to H2. apply IH to H3. search.
    apply IH1 to H2. apply IH to H3. apply intg_intd to H5 with U = U. search.
    apply IH to H2. search.
    apply IH1 to H2. search.
    apply IH1 to H2. apply IH2 to H3. apply integ_inted to H5 with U = U. search.
    apply IH2 to H2. search.
    apply IH to H2. search.
  intros. case H1.
    search.
    apply IH to H2. search.
  intros. case H1.
    search.
    apply IH2 to H2. apply IH to H3. search.

Split refls as int_refl, intv_refl, inte_refl.

Theorem red_stans :
  (forall E E', red E E' -> stan g E E') /\
  (forall V V', redv V V' -> intv V V') /\
  (forall U E E', redd U E E' -> int (d U) E E') /\
  (forall E E', rede E E' -> inte g E E').
  induction on 1 1 1 1. split.
  intros. case H1.
    apply int_refl to H2. apply intv_refl to H3. apply int_subv to H4 H5. search.
    apply int_refl to H2. apply intv_refl to H3. apply int_subv to H4 H5. search.
    apply int_refl to H2. apply intv_refl to H3. apply int_subdelim to H5 H4. search.
    apply int_refl to H3. apply int_refl to H2. apply int_sublet to _ H5. search.
    apply int_refl to H2. apply int_refl to H3. apply int_refl to H4. search.
    apply intv_refl to H2. apply inte_refl to H3. search.
    apply intv_refl to H2. apply intv_refl to H3. search.
    apply int_refl to H2. search.
    apply IH1 to H2. apply intv_refl to H3. search.
    apply IH1 to H2. apply intv_refl to H3. search.
    apply IH to H2. apply int_refl to H3. case H4. apply steps_cong_let to H6 with T = T. search.
    apply IH to H2. apply int_refl to H3. search.
    apply IH to H2. search.
    apply IH to H2. case H4. apply steps_cong_delim to H5 with U = U. apply intg_intd to H6 with U = U. apply intv_refl to H3. search.
    apply IH2 to H2. apply intv_refl to H3. search.
    apply IH1 to H2. apply int_refl to H3. apply intg_intd to H5 with U = U. search.
    apply IH1 to H2. search.
    apply IH to H2. case H3. apply steps_cong_k to H4. search.
    apply IH3 to H2. search.
    apply IH1 to H2. apply inte_refl to H3. apply integ_inted to H5 with U = U. search.
    apply intv_refl to H2. apply IH3 to H3. apply integ_inted to H5 with U = U. search.
  intros. case H1.
    apply IH to H2. search.
  intros. case H1.
    apply int_refl to H2. apply intv_refl to H3. search.
    apply intv_refl to H2. search.
    apply int_refl to H2. search.
    apply int_refl to H2. apply IH2 to H3. search.
  intros. case H1.
    apply IH3 to H2. apply int_refl to H3. search.
    apply inte_refl to H2. apply IH to H3. search.

Split red_stans as red_stang, redv_intv, redd_intd.


%%% POSTPONEMENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem posts :
  (forall M E E'' E', int M E E'' -> step E'' E' -> md M -> stan M E E') /\
  (forall E E'' E', int g E E'' -> stepc E'' E' -> exists E''', nabla k, stepc E E''' /\ stan g (E''' k) (E' k)).
  induction on 1 1. split.
  intros. case H1.
    case H2.
    backchain stang_stanM. case H2. case H4. apply stan_subv to H6 H5. case H7. search.
    case H2.
      case H4. apply stan_subv to H5 H6. case H7. search.
      apply IH to H4 H6 _. case H7. apply steps_cong_let to H8 with T = T. search.
    case H2.
    backchain stang_stanM. case H2.
      case H5.
        search.
        search.
        case H6. case H8. apply steps_cong_delim to H7 with U = U. assert many step (delim U (ret V1)) (ret V1). apply steps_app to H10 H11. search.
      case H6.
        case H5.
          apply stan_subdelim to H4 H7. case H8. search.
          apply stan_subdlet to _ H7. case H9. search.
          apply stan_subdelim to H8 H7. case H9. search.
          case H7. apply steps_cong_delim to H8 with U = U. case H9.
            apply stan_subdelim to H4 H11. assert many step (delim U (shift0 E3)) (E3 (delim U)). apply steps_app to H10 H13. case H12. apply steps_app to H14 H15. search.
            assert nabla x, stan g (T x) (T' x).
            apply stan_sublet to H13 H11. apply stan_subdelim to H4 H14. case H15. assert many step (delim U (let (shift0 E3) T)) (E3 (o\ delim U (let o T))). apply steps_app to H18 H16. apply steps_app to H10 H19. search.
        case H5.
          apply IH1 to H8 H7. apply stan_subdlet to _ H11. case H12. search.
          apply IH1 to H8 H7. apply stan_subdllet to _ H12. case H13. search.
          case H8. case H10.
            apply IH1 to H11 H7. apply stan_sublet to _ H14. apply stan_subdelim to H4 H15. case H16. apply steps_cong_delim to H9 with U = U. assert many step (delim U (let E4 T1)) (E''' (o\ delim U (let o T1))). apply steps_app to H19 H20. apply steps_app to H21 H17. search.
            apply IH1 to H11 H7. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x). apply stan_subllet to H16 H15. apply stan_subdelim to H4 H17. case H18. apply steps_cong_delim to H9 with U = U. assert many step (delim U (let (let E4 T1) T2)) (E''' (o\ delim U (let (let o T1) T2))). apply steps_app to H21 H22. apply steps_app to H23 H19. search.
      apply IH to H5 H6 _. case H7. apply steps_cong_delim to H8 with U = U. search.
    case H2. case H4. search.
    case H2.
    case H2.
      case H4. apply stan_subv to H5 H7. case H8. apply steps_cong_let to H9 with T = T2. search.
      apply IH to H4 H7 _. case H8. apply steps_cong_let to H9 with T = T1. apply steps_cong_let to H11 with T = T2. search.
    backchain stang_stanM. case H2.
      apply IH1 to H4 H5. apply stan_contrk to H7. case H8. search.
      apply IH to H4 H5 _. case H6. apply steps_cong_k to H7. search.
    case H2.
    case H2. case H4. apply IH to H6 H2 _. case H7. apply steps_app to H5 H8. search.
  intros. case H1.
    case H2.
    case H2.
    case H2. apply IH1 to H3 H5. assert nabla x, stan g (T x) (T' x). apply stan_sublet to H8 H7. search.
    case H2. search.
    case H2.
    case H2.
    case H2. assert nabla x, stan g (T x) (T' x). apply stan_sublet to H5 H3. search.
    case H2. apply IH1 to H3 H6. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T2 x) (T2' x). apply stan_subllet to H9 H8. search.
    case H2.

Split posts as post, postc.

Theorem post_many : forall E E'' E', int g E E'' -> many step E'' E' -> stan g E E'.
  induction on 2.
  intros. case H2.
    search.
    apply post to H1 H3 _. case H5. apply IH to H7 H4. case H8. apply steps_app to H6 H9. search.


%%% COMMUTATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem qscomms :
  (forall M E1 E2 E3, int M E1 E2 -> step E1 E3 -> md M -> exists E4, maybe step E2 E4 /\ stan M E3 E4) /\
  (forall E1 E2 E3, int g E1 E2 -> stepc E1 E3 -> exists E4, stepc E2 E4 /\ nabla k, stan g (E3 k) (E4 k)).
  induction on 1 1. split.
  intros. case H2.
    case H1. case H4. apply stan_subv to H5 H6. search.
    case H1. case H4. apply stan_subv to H6 H5. apply stang_stanM to H7 _. search.
    case H1. case H5. search.
    case H1. case H4. search.
    case H1. case H4.
      case H6.
        apply stan_subdelim to H5 H7. apply stang_stanM to H8 _. search.
        apply stan_subdelim to H8 H7. apply stang_stanM to H9 _. search.
        search.
        case H7. apply steps_cong_delim to H8 with U = U. apply intg_intd to H9 with U = U. search.
      case H6.
        apply IH1 to H8 H7. apply stan_subdlet to _ H11. apply stang_stanM to H12 _. search.
        case H7. apply stan_subdlet to _ H8. apply stang_stanM to H10 _. search.
        case H7. apply IH1 to H8 H11. assert nabla x, intv U U' /\ stan g (T1 x) (T1' x) /\ stan (d U) (T x) (T2' x). apply stan_subdllet to H14 H13. apply stang_stanM to H15 _. search.
    case H1. apply IH1 to H5 H4. apply stan_contrk to H7. apply stang_stanM to H8 _. search.
    case H1. apply IH to H6 H4 _. case H8. apply steps_cong_delim to H9 with U = U. apply step?_cong_delim to H7 with U = U'. search.
    case H1.
      apply IH to H5 H4 _. case H8. apply steps_cong_let to H9 with T = T. apply step?_cong_let to H7 with T = T'. search.
      case H4.
      case H4.
        case H5. apply stan_subv to H6 H8. case H9. apply steps_cong_let to H10 with T = T. search.
        apply IH to H5 H8 _. case H10. apply steps_cong_let to H11 with T = T1. apply steps_cong_let to H13 with T = T. apply step?_cong_let to H9 with T = (x\ let (T1' x) T2'). search.
    case H1. apply IH to H5 H4 _. case H7. apply steps_cong_k to H8. apply step?_cong_k to H6. search.
  intros. case H2.
    case H1. search.
    case H1.
      apply IH1 to H4 H3. apply stan_sublet to _ H7. search.
      case H3. assert nabla x, stan g (T x) (T' x). apply stan_sublet to H6 H4. search.
      case H3. apply IH1 to H4 H7. assert nabla x, stan g (T1 x) (T1' x) /\ stan g (T x) (T2' x). apply stan_subllet to H10 H9. search.

Split qscomms as qscomm, qscommc.

Theorem subcomm_ : forall E1 E12 E2 E3, many step E1 E12 -> int g E12 E2 -> step E1 E3 -> exists E4, maybe step E2 E4 /\ stan g E3 E4.
  induction on 1.
  intros. case H1.
    apply qscomm to H2 H3 _. search.
    apply step_det to H3 H4. search.

Theorem subcomm : forall E1 E2 E3, stan g E1 E2 -> step E1 E3 -> exists E4, maybe step E2 E4 /\ stan g E3 E4.
  intros. case H1. backchain subcomm_.

Theorem strong_comm : forall E1 E2 E3, stan g E1 E2 -> many step E1 E3 -> exists E4, many step E2 E4 /\ stan g E3 E4.
  induction on 2.
  intros. case H2.
    search.
    apply subcomm to H1 H3. apply IH to H6 H4. case H5.
      search.
      search.


%%% ADEQUACY %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem stan : forall E E', many red E E' -> exists E'', many step E E'' /\ many (int g) E'' E'.
  induction on 1.
  intros. case H1.
    search.
    apply red_stang to H2. case H4. apply IH to H3. apply post_many to H6 H7. case H9. apply steps_app to H5 H10. search.

Theorem adq1 : forall E E' V', red E E' -> many step E' (ret V') -> exists V, many step E (ret V).
  intros.
  apply red_stang to H1. case H3. apply post_many to H5 H2. case H6. case H8. apply steps_app to H4 H7. search.

Theorem adq2 : forall E E' V, red E E' -> many step E (ret V) -> exists V', many step E' (ret V').
  intros.
  apply red_stang to H1. apply strong_comm to H3 H2. case H5. case H6.
    case H7. search.
    case H8.


%%% GENERAL TERMINATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define is_meta_stuck : expr -> prop by
  nabla x, is_meta_stuck (app x (E x));
  nabla (k : expr -> expr), is_meta_stuck (ask (k (E k)));
  nabla (k : expr -> expr), is_meta_stuck (k (ret (V k)));
  is_meta_stuck (let E T) := is_meta_stuck E;
  is_meta_stuck (delim U E) := is_meta_stuck E;
  nabla k, is_meta_stuck (k (E k)) := nabla k, is_meta_stuck (E k).


Theorem nostep : forall E, is_expr E -> (forall E', step E E' -> false)
    -> (exists V, E = ret V) \/ is_meta_stuck E \/ (exists E'', stepc E E'').
  induction on 1.
  intros. case H1.
    case H3.
      search.
      apply H2 to _.
    apply IH to H3 _. intros. apply H2 to _. case H5.
      apply H2 to _.
      search.
      search.
    apply IH to H4 _. intros. apply H2 to _. case H5.
      apply H2 to _.
      search.
      apply H2 to _.
    search.
    search.
    apply H2 to _.
    search.
    apply IH to H3 _. intros. apply H2 to _. case H4.
      search.
      search.
      apply H2 to _.


Define terminates : expr -> prop by
  terminates E := exists E', many step E E' /\ forall E'', (step E' E'' -> false).

Theorem meta_stuck_stepc : forall E E', is_meta_stuck E -> stepc E E' -> false.
  induction on 1.
  intros. case H2.
    case H1.
    case H1. backchain IH.

Theorem meta_stuck_step : forall E E', is_meta_stuck E -> step E E' -> false.
  induction on 1.
  intros. case H1.
    case H2.
    case H2.
    case H2.
      case H3.
      case H3.
    case H2.
      case H3.
      backchain IH.
    case H2.
      case H3.
      backchain meta_stuck_stepc.
      backchain IH.
    case H2.
      apply meta_stuck_stepc to H3 H4.
      apply IH to H3 H4.

Theorem int_meta_stuck :
  forall E E', is_meta_stuck E' -> int g E E' -> exists E'', many step E E'' /\ is_meta_stuck E''.
  induction on 1.
  intros. case H1.
    case H2. case H3. search.
    case H2. case H3. search.
    case H2. case H3. search.
    case H2.
      apply IH to H3 H4. apply steps_cong_let to H6 with T = T1. search.
      apply IH to H3 H4. apply steps_cong_let to H7 with T = T1. apply steps_cong_let to H9 with T = T2. search.
    case H2. case H3 (keep).
      case H5.
        case H6. search.
        case H6. case H8. case H9. apply steps_cong_delim to H7 with U = U1 n1. search.
      case H5.
        case H6. search.
        case H6. case H8. case H9. apply steps_cong_delim to H7 with U = U1 n1. search.
      case H5.
        case H6. search.
        case H6. case H8. case H9. apply steps_cong_delim to H7 with U = U1 n1. search.
      case H5.
        apply IH to H6 H7. apply steps_cong_let to H9 with T = T1. apply steps_cong_delim to H11 with U = U1. search.
        apply IH to H6 H7. apply steps_cong_let to H10 with T = T1. apply steps_cong_let to H12 with T = T2. apply steps_cong_delim to H13 with U = U1. search.
        case H7. case H9.
          apply IH to H6 H10. apply steps_cong_let to H12 with T = T1. apply steps_app to *H8 *H14. apply steps_cong_delim to *H15 with U = U1. search.
          apply IH to H6 H10. apply steps_cong_let to H13 with T = T1. apply steps_cong_let to H15 with T = T2. apply steps_app to *H8 *H16. apply steps_cong_delim to H17 with U = U1. search.
      case H5.
        apply IH to H3 _. apply steps_cong_delim to H9 with U = U1. search.
        case H7.
          apply IH to H3 H9. apply steps_cong_delim to *H8 with U = U1. apply steps_cong_delim to *H10 with U = U1. apply steps_app to *H12 *H13. search.
      case H5.
        apply IH to H6 H7. apply steps_cong_k to H8. apply steps_cong_delim to H10 with U = U1 n1. search.
        case H7. apply IH to H3 H9. apply steps_cong_delim to *H8 with U = U1 n1. apply steps_cong_delim to *H10 with U = U1 n1. apply steps_app to *H12 *H13. search.
    case H2. apply IH to *H3 *H4. apply steps_cong_k to H5. search.

Theorem int_ind : forall E E', int g E E' -> is_expr E /\ is_expr E'.
  skip.

Split int_ind as int_ind1, int_ind2.

Theorem int_nostep : forall E E', int g E E' -> (forall E'', step E' E'' -> false) -> terminates E.
  intros. apply nostep to _ H2. backchain int_ind2. case H3.
    case H1. unfold. exists (ret V1). split. search. intros. case H5.
    apply int_meta_stuck to H4 H1. unfold. exists E''. split. search. intros. apply meta_stuck_step to H6 H7.
    apply postc to H1 H4. unfold. exists E. split. search. intros. apply stepc_step to H5 H7.

Theorem meta_stuck_int : forall M E E', is_meta_stuck E -> int M E E' -> is_meta_stuck E'.
  induction on 1.
  intros. case H1.
    case H2. case H3. search.
    case H2. case H3. search.
    case H2. case H3. search.
    case H2.
      apply IH to H3 H4. search.
      case H3.
      case H3. apply IH to H7 H4. search.
    case H2. apply IH to H3 H5. search.
    case H2. apply IH to H3 H4. search.


Theorem nostep_int : forall E E', int g E E' -> (forall E''', step E E''' -> false) -> (forall E''', step E' E''' -> false).
  intros. apply nostep to _ *H2. backchain int_ind1. case H4.
    case H1. case H3.
    apply meta_stuck_int to *H5 *H1. backchain meta_stuck_step.
    apply qscommc to *H1 *H5. backchain stepc_step.

Theorem adq3 : forall E E', red E E' -> terminates E' -> terminates E.
  intros.
  apply red_stang to *H1. case H3. case H2. apply post_many to H5 H6. case H8. apply int_nostep to H10 H7. case H11. apply steps_app to *H4 *H9. apply steps_app to *H14 *H12. search.

Theorem adq4 : forall E E', red E E' -> terminates E -> terminates E'.
  intros.
  apply red_stang to *H1. case H2. apply strong_comm to H3 H4. case H7. case H8.
    apply nostep_int to H9 H5. search.
    apply H5 to _.
