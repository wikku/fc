% vim: et
Kind val,expr type.
Kind lbl type.

Type lam    (val -> expr) -> val.

Type ret    val -> expr.
Type app    val -> val -> expr.
Type let    expr -> (val -> expr) -> expr.
Type shift0 ((expr -> expr) -> expr) -> expr.
Type delim  expr -> expr.

Kind skel type.
Type sk0 skel.
Type sk1 skel -> skel.
Type sk2 skel -> skel -> skel.

Define skel : skel -> prop by
  skel sk0;
  skel (sk1 S) := skel S;
  skel (sk2 S1 S2) := skel S1 /\ skel S2.

Define eos : expr -> skel -> prop,
       vos : val -> skel -> prop by
  nabla x, vos x sk0;
  vos (lam E) (sk1 S) := nabla x, eos (E x) S;

  eos (ret V) (sk1 S) := vos V S;
  eos (app V1 V2) (sk2 S1 S2) := vos V1 S1 /\ vos V2 S2;
  eos (let E T) (sk2 S1 S2) := eos E S1 /\ nabla x, eos (T x) S2;
  eos (shift0 E) (sk1 S) := nabla k, eos (E k) S;
  eos (delim E) (sk1 S) := eos E S;
  nabla k, eos (k (E k)) (sk1 S) := nabla k, eos (E k) S.

Define par : expr -> expr -> prop,
       pard : expr -> expr -> prop,
       parv : val -> val -> prop,
       parp : (expr -> expr) -> expr -> expr -> prop by

  nabla x, parv x x;
  parv (lam E) (lam E') := nabla x, par (E x) (E' x);

  nabla e, par e e;

  par (app (lam E) V) (E' V') := parv V V' /\ nabla x, par (E x) (E' x);
  par (let (ret V) E) (E' V') := parv V V' /\ nabla x, par (E x) (E' x);
  par (delim (ret V)) (ret V') := parv V V';
  par (let (shift0 k\ E1 k) E2) (shift0 k\ E1' (o\ k (let o E2'))) :=
    nabla x, par (E2 x) (E2' x) /\ nabla k, par (E1 k) (E1' k);
  par (delim (shift0 k\ E k)) E' := par (E delim) E';

  par (app V U) (app V' U') := parv V V' /\ parv U U';
  par (let E1 E2) (let E1' E2') := par E1 E1' /\ nabla x, par (E2 x) (E2' x);
  par (delim (let E T)) E' := exists T', nabla x, pard (T x) (T' x) /\ parp (o\ delim (let o T')) E E';
  par (delim E) (delim E') := pard E E';
  par (delim E) (delim E') := par E E';
  par (delim E) E' := parp delim E E';
  par (shift0 E) (shift0 E') := nabla k, par (E k) (E' k);
  par (ret V) (ret V') := parv V V';
  nabla k, par (k (E k)) (k (E' k)) := nabla k, par (E k) (E' k);
  nabla k, par (k (E k)) (E' k) := nabla k, parp (o\ k o) (E k) (E' k);

  pard (let E1 E2) (let E1' E2') := par E1 E1' /\ nabla x, pard (E2 x) (E2' x);
  pard (let (ret V) E) (E' V') := parv V V' /\ nabla x, pard (E x) (E' x);
  pard (let (shift0 k\ E1 k) E2) (shift0 k_\ E1' (o\ delim (let o E2'))) :=
    nabla x, pard (E2 x) (E2' x) /\ nabla k, par (E1 k) (E1' k);
  pard (shift0 k\ E k) (shift0 k_\ E') := par (E delim) E';

  parp K (shift0 E) (E' K) := nabla k, par (E k) (E' k);
  parp K (let E T) E' := exists T', nabla x, par (T x) (T' x) /\ parp (o\ K (let o T')) E E'.

Define park : (expr -> expr) -> (expr -> expr) -> prop by
  park K K' := nabla o, par (K o) (K' o).

Theorem pars_subv :
  (forall E E' U U', nabla x, par (E x) (E' x) -> parv U U' -> par (E U) (E' U')) /\
  (forall E E' U U', nabla x, pard (E x) (E' x) -> parv U U' -> pard (E U) (E' U')) /\
  (forall V V' U U', nabla x, parv (V x) (V' x) -> parv U U' -> parv (V U) (V' U')) /\
  (forall K E E' U U', nabla x, parp (K x) (E x) (E' x) -> parv U U' -> parp (K U') (E U) (E' U')).
  induction on 1 1 1 1. split.
  intros. case H1.
    search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH1 to H3 H2. apply IH3 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
  intros. case H1.
    apply IH to H3 H2. apply IH1 to H4 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
  intros. case H1.
    search.
    search.
    apply IH to H3 H2. search.
  intros. case H1.
    apply IH to H3 H2. search.
    apply IH to H3 H2. apply IH3 to H4 H2. search.

Split pars_subv as par_subv, pard_subv, parv_subv, parp_subv.


Theorem pars_sublet :
  (forall E E' T T', nabla (k : expr -> expr) x, par (E k) (E' k) -> par (T x) (T' x) -> par (E (o\k (let o T))) (E' (o\k (let o T')))) /\
  (forall E E' T T', nabla (k : expr -> expr) x, pard (E k) (E' k) -> par (T x) (T' x) -> pard (E (o\k (let o T))) (E' (o\k (let o T')))) /\
  (forall V V' T T', nabla (k : expr -> expr) x, parv (V k) (V' k) -> par (T x) (T' x) -> parv (V (o\k (let o T))) (V' (o\k (let o T')))) /\
  (forall K E E' T T', nabla (k : expr -> expr) x, parp (K k) (E k) (E' k) -> par (T x) (T' x) -> parp (K (o\k (let o T'))) (E (o\k (let o T))) (E' (o\k (let o T')))).
  induction on 1 1 1 1. split.
  intros. permute (n2 n3) H2. case H1.
    search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH1 to H3 H2. apply IH3 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH3 to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. apply IH1 to H4 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. search.
    apply IH to H3 H2. apply IH3 to H4 H2. search.

Split pars_sublet as par_sublet, pard_sublet, parv_sublet.

Theorem pars_subdelim :
  (forall E E', nabla (k : expr -> expr), par (E k) (E' k) -> par (E delim) (E' delim)) /\
  (forall E E', nabla (k : expr -> expr), pard (E k) (E' k) -> pard (E delim) (E' delim)) /\
  (forall V V', nabla (k : expr -> expr), parv (V k) (V' k) -> parv (V delim) (V' delim)) /\
  (forall K E E', nabla (k : expr -> expr), parp (K k) (E k) (E' k) -> parp (K delim) (E delim) (E' delim)).
  induction on 1 1 1 1. split.
  intros. case H1 (keep).
    search.
    apply IH2 to H2. apply IH to H3. search.
    apply IH2 to H2. apply IH to H3. search.
    apply IH2 to H2. search.
    apply IH to H2. apply IH to H3. search.
    apply IH to H2. search.
    apply IH2 to H2. apply IH2 to H3. search.
    apply IH to H2. apply IH to H3. search.
    apply IH1 to H2. apply IH3 to H3. search.
    apply IH1 to H2. search.
    apply IH to H2. search.
    apply IH3 to H2. search.
    apply IH to H2. search.
    apply IH2 to H2. search.
    apply IH to H2. search.
    apply IH to H2. search.
    apply IH3 to H2 with k = n1. search.
    apply IH3 to H2. search.
  intros. case H1 (keep).
    apply IH to H2. apply IH1 to H3. search.
    apply IH2 to H2. apply IH1 to H3. search.
    apply IH1 to H2. apply IH to H3. search.
    apply IH to H2. search.
  intros. case H1.
    search.
    apply IH to H2. search.
  intros. case H1.
    apply IH to H2. search.
    apply IH to H2. apply IH3 to H3. search.

Split pars_subdelim as par_subdelim, pard_subdelim, parv_subdelim.

% exactly same proof as pars_sublet
Theorem pars_subdlet :
  (forall E E' T T', nabla (k : expr -> expr) x, par (E k) (E' k) -> pard (T x) (T' x) -> par (E (o\delim (let o T))) (E' (o\delim (let o T')))) /\
  (forall E E' T T', nabla (k : expr -> expr) x, pard (E k) (E' k) -> pard (T x) (T' x) -> pard (E (o\delim (let o T))) (E' (o\delim (let o T')))) /\
  (forall V V' T T', nabla (k : expr -> expr) x, parv (V k) (V' k) -> pard (T x) (T' x) -> parv (V (o\delim (let o T))) (V' (o\delim (let o T')))) /\
  (forall K E E' T T', nabla (k : expr -> expr) x, parp (K k) (E k) (E' k) -> pard (T x) (T' x) -> parp (K (o\delim (let o T'))) (E (o\delim (let o T))) (E' (o\delim (let o T')))).
  induction on 1 1 1 1. split.
  intros. permute (n2 n3) H2. case H1.
    search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH1 to H3 H2. apply IH3 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH3 to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. apply IH1 to H4 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. search.
    apply IH to H3 H2. apply IH3 to H4 H2. search.

Split pars_subdlet as par_subdlet, pard_subdlet, parv_subdlet.

Theorem subdelims :
  (forall S E, nabla x, skel S -> eos (E x) S -> eos (E delim) S) /\
  (forall S V, nabla x, skel S -> vos (V x) S -> vos (V delim) S).
  induction on 1 1. split.
  intros. case H1.
    case H2.
    case H2.
      apply IH1 to H3 H4. search.
      apply IH to H3 H4. search.
      apply IH to H3 H4. search.
      apply IH to H3 H4. search.
      apply IH to H3 H4. search.
    case H2.
      apply IH1 to H3 H5. apply IH1 to H4 H6. search.
      apply IH to H3 H5. apply IH to H4 H6. search.
  intros. case H1.
    case H2. search.
    case H2. apply IH to H3 H4. search.
    case H2.

Split subdelims as subdelim, vsubdelim.

Theorem pars_pluglet :
  (forall K K' T T', nabla o x, par (K o) (K' o) -> par (T x) (T' x) -> par (K (let o T)) (K' (let o T'))) /\
  (forall K K' T T', nabla o x, pard (K o) (K' o) -> par (T x) (T' x) -> pard (K (let o T)) (K' (let o T'))) /\
  (forall K K' T T', nabla o x, parv (K o) (K' o) -> par (T x) (T' x) -> parv (K (let o T)) (K' (let o T'))) /\
  (forall C K K' T T', nabla o x, parp (C o) (K o) (K' o) -> par (T x) (T' x) -> parp (C (let o T')) (K (let o T)) (K' (let o T'))).
  induction on 1 1 1 1. split.
  intros. permute (n2 n3) H2. case H1 (keep).
    search.
    search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. apply IH to H4 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. apply IH2 to H4 H2. search.
    apply IH to H3 H2. apply IH to H4 H2. search.
    apply IH1 to H3 H2. apply IH3 to H4 H2. search.
    apply IH1 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH2 to H3 H2. search.
    apply IH to H3 H2. search.
    apply IH3 to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. apply IH1 to H4 H2. search.
    apply IH2 to H3 H2. apply IH1 to H4 H2. search.
    apply IH1 to H3 H2. apply IH to H4 H2. search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    search.
    apply IH to H3 H2. search.
  intros. permute (n2 n3) H2. case H1.
    apply IH to H3 H2. search.
    apply IH to H3 H2. apply IH3 to H4 H2. search.

Split pars_pluglet as par_pluglet, pard_pluglet, parv_pluglet, parp_pluglet.

Theorem park_pluglet :
  forall K K' T T', nabla x, park K K' -> par (T x) (T' x) -> park (o\ K (let o T)) (o\ K' (let o T')).
  intros. case H1. apply par_pluglet to H3 H2. search.

Theorem pars_diam :
  (forall S E E1 E2, skel S -> eos E S -> par E E1 -> par E E2 -> exists E3, par E1 E3 /\ par E2 E3) /\
  (forall S E E1 E2, skel S -> eos E S -> pard E E1 -> pard E E2 -> exists E3, pard E1 E3 /\ pard E2 E3) /\
  (forall S V V1 V2, skel S -> vos V S -> parv V V1 -> parv V V2 -> exists V3, parv V1 V3 /\ parv V2 V3) /\
  (forall S E E1 E2, skel S -> eos E S -> pard E E1 -> par E E2 -> exists E3, pard E1 E3 /\ pard E2 E3) /\
  (forall S K1 K2 K3 E E1 E2, skel S -> eos E S -> parp K1 E E1 -> parp K2 E E2 -> park K1 K3 -> park K2 K3 -> exists E3, par E1 E3 /\ par E2 E3).
  induction on 1 1 1 1 1. split.
  intros. case H3.
    case H4. search.
    case H4.
      case H2. case H9. case H1. case H12. apply IH to H14 _ H6 H8. apply IH2 to H13 _ H5 H7. apply par_subv to H15 H17. apply par_subv to H16 H18. search.
      case H2. case H9. case H1. case H12. case H7. apply IH2 to H13 _ H5 H8. apply IH to H14 _ H6 H15. apply par_subv to H18 H16. search.
    case H4.
      case H2. case H9. case H1. case H12. apply IH to H13 _ H6 H8. apply IH2 to H14 _ H5 H7. apply par_subv to H15 H17. apply par_subv to H16 H18. search.
      case H2. case H9. case H1. case H12. case H7. apply IH to H13 _ H6 H8. apply IH2 to H14 _ H5 H15. apply par_subv to H16 H18. search.
    case H4.
      case H2. case H7. case H1. case H9. apply IH2 to H10 _ H5 H6. search.
      case H6.
      case H2. case H7. case H1. case H9. case H6. apply IH2 to H10 _ H5 H11. search.
      case H6.
    case H4.
      case H2. case H9. case H1. case H12. apply IH to H13 _ H5 H7. apply IH to H14 _ H6 H8. apply par_sublet to H17 H15. apply par_sublet to H18 H16. search.
      case H2. case H9. case H7. case H1. case H13. apply IH to H14 _ H5 H8. apply IH to H15 _ H6 H12. apply par_sublet to H18 H16. search.
    case H4.
      case H2. case H7. case H1. case H9. apply subdelim to H10 H8. apply IH to H10 _ H5 H6. search.
      case H2. case H7. case H6. case H1. case H10. apply subdelim to H11 H8. apply IH to H11 _ H5 H9. search.
      case H2. case H6. case H7. case H1. case H10. apply subdelim to H11 H9. apply par_subdelim to H8. apply IH to H11 _ H5 H13. search.
      case H2. case H6. case H7. case H1. case H10. apply subdelim to H11 H9. apply par_subdelim to H8. apply IH to H11 _ H5 H13. search.
    case H4.
      case H2. case H5. case H9. case H1. case H13. apply IH2 to H14 _ H6 H7. apply IH to H15 _ H8 H11. apply par_subv to H18 H17. search.
      case H2. case H1. apply IH2 to H11 _ H5 H7. apply IH2 to H12 _ H6 H8. search.
    case H4.
      case H2. case H5. case H9. case H1. case H13. apply IH2 to H15 _ H7 H11. apply IH to H14 _ H6 H8. apply par_subv to H19 H16. search.
      case H2. case H5. case H9. case H1. case H13. apply IH to H14 _ H6 H7. apply IH to H15 _ H8 H11. apply par_sublet to H18 H17. search.
      case H2. case H1. apply IH to H11 _ H5 H7. apply IH to H12 _ H6 H8. search.
    case H4.
      case H2. case H9. case H1. case H12. apply IH1 to H14 _ H5 H7. apply IH4 to H13 _ H6 H8 _ _. search.
      case H2. case H8. case H1. case H11. case H7.
        apply IH1 to H13 _ H5 H15. skip. % par parp?
        case H6.
        case H6. apply IH1 to H13 _ H5 H14. case H9. case H12. apply IH to H20 _ H15 H16. apply par_subdlet to H22 H17. apply par_subdlet to H21 H18. search.
      case H2. case H8. case H1. case H11. case H7.
        case H6.
        case H6. case H9. case H12. apply IH3 to H13 _ H5 H14. apply IH to H18 _ H15 H16. apply par_subdlet to H22 H19. apply par_subdlet to H21 H20. search.
        apply IH3 to H13 _ H5 H15. skip. % par parp
      case H2. case H8. case H1. case H11. case H7. apply IH3 to H13 _ H5 H14. apply IH4 to H12 _ H6 H15 _ _. search.
    case H4.
      case H5.
      case H2. case H5. case H7. case H1. case H10. apply subdelim to H11 H9. apply IH to H11 _ H6 H8. search.
      case H2. case H8. case H1. case H11. case H5.
        apply IH1 to H13 _ H6 H15. skip. % par parp
        case H7.
        case H7. case H9. case H12. apply IH1 to H13 _ H6 H14. apply IH to H18 _ H15 H16. apply par_subdlet to H21 H20. apply par_subdlet to H22 H19. search.
      case H2. case H1. apply IH1 to H8 _ H5 H6. search.
      case H2. case H1. apply IH3 to H8 _ H5 H6. search.
      case H2. case H1. skip. % pard parp delim ?
    case H4.
      case H2. case H5. case H7. case H1. case H10. apply IH2 to H11 _ H6 H8. search.
      case H2. case H5. case H7. case H1. case H10. apply par_subdelim to H8. apply subdelim to H11 H9. apply IH to H11 _ H6 H12. search.
      case H2. case H8. case H1. case H11. case H5.
        case H7.
        case H7. case H9. case H12. apply IH3 to H13 _ H6 H14. apply IH to H18 _ H15 H16. apply par_subdlet to H21 H20. apply par_subdlet to H22 H19. search.
        apply IH3 to H13 _ H6 H15. skip. % par parp
      case H2. case H1. apply IH3 to H8 _ H6 H5. search.
      case H2. case H1. apply IH to H8 _ H5 H6. search.
      case H2. case H1. skip. % par parp delim ?
    case H4.
      case H2. case H5.
      case H5. case H2. case H8. case H1. case H10. apply subdelim to H11 H9. apply par_subdelim to H7. apply IH to H11 _ H6 H13. search.
      case H2. case H5. case H8. case H1. case H13. apply IH3 to H15 _ H6 H9. apply IH4 to H14 _ H7 H10 _ _. search.
      case H2. case H1. skip. % pard parp delim
      case H2. case H1. skip. % par parp delim
      case H2. case H1. apply IH4 to H8 _ H5 H6 _ _. search.
    case H4.
      case H2. case H1. apply IH to H8 _ H5 H6. search.
    case H4.
      case H2. case H1. apply IH2 to H8 _ H5 H6. search.
    case H4.
      case H2. case H1. apply IH to H8 _ H5 H6. search.
      case H2. case H1. skip. % par parp
    case H4.
      case H2. case H1. skip. % par parp
      case H2. case H1. apply IH4 to H8 _ H5 H6 _ _. search.
  intros. case H3.
    case H4.
      case H2. case H1. apply IH to H11 _ H5 H7. apply IH1 to H12 _ H6 H8. search.
      case H2. case H5. case H9. case H1. case H13. apply IH2 to H15 _ H7 H11. apply IH1 to H14 _ H6 H8. apply pard_subv to H19 H16. search.
      case H2. case H5. case H9. case H1. case H13. apply IH1 to H14 _ H6 H7. apply IH to H15 _ H8 H11. apply par_subdlet to H18 H17. search.
    case H4.
      case H2. case H7. case H9. case H1. case H13. apply IH1 to H14 _ H6 H8. apply IH2 to H15 _ H5 H11. apply pard_subv to H16 H18. search.
      case H2. case H9. case H1. case H12. apply IH1 to H13 _ H6 H8. apply IH2 to H14 _ H5 H7. apply pard_subv to H15 H17. apply pard_subv to H16 H18. search.
    case H4.
      case H2. case H7. case H9. case H1. case H13. apply IH1 to H14 _ H5 H8. apply IH to H15 _ H6 H11. apply par_subdlet to H18 H16. search.
      case H2. case H9. case H1. case H12. apply IH1 to H13 _ H5 H7. apply IH to H14 _ H6 H8. apply par_subdlet to H17 H15. apply par_subdlet to H18 H16. search.
    case H4.
      case H2. case H1. apply subdelim to H8 H7. apply IH to H8 _ H5 H6. search.
  intros. case H3.
    case H4. search.
    case H4. case H2. case H1. apply IH to H8 _ H5 H6. search.
  intros. case H3.
    case H4.
      case H2. case H5. case H9. case H1. case H13. apply IH2 to H15 _ H7 H11. apply IH3 to H14 _ H6 H8. apply pard_subv to H19 H16. search.
      case H2. case H5. case H9. case H1. case H13. apply IH3 to H14 _ H6 H7. apply IH to H15 _ H8 H11. apply par_subdlet to H18 H17. search.
      case H2. case H1. apply IH to H11 _ H5 H7. apply IH3 to H12 _ H6 H8. search.
    case H4.
      case H2. case H9. case H1. case H12. apply IH3 to H13 _ H6 H8. apply IH2 to H14 _ H5 H7. apply pard_subv to H15 H17. apply pard_subv to H16 H18. search.
      case H2. case H7. case H9. case H1. case H13. apply IH3 to H14 _ H6 H8. apply IH2 to H15 _ H5 H11. apply pard_subv to H16 H18. search.
    case H4.
      case H2. case H9. case H1. case H12. apply IH3 to H13 _ H5 H7. apply IH to H14 _ H6 H8. apply par_subdlet to H17 H15. apply par_subdlet to H18 H16. search.
      case H2. case H7. case H9. case H1. case H13. apply IH3 to H14 _ H5 H8. apply IH to H15 _ H6 H11. apply par_subdlet to H18 H16. search.
    case H4.
      case H2. case H1. apply subdelim to H8 H7. apply par_subdelim to H6. apply IH to H8 _ H5 H10. search.
  intros. case H3. % IH4
    case H4. case H2. case H1. apply IH to H10 _ H7 H8. skip. % par_subk
    case H4. case H2. case H1. apply IH to H14 _ H7 H9. apply park_pluglet to H5 H15. apply park_pluglet to H6 H16. apply IH4 to H13 _ H8 H10 _ _. search.
